import axios from "axios";
export const CHATS_ID = {
  BASE: -1002378962422, // –ì–ª–∞–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞
  BASE_DEV: -1002383432249, // –ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
};
export const TOPICS_ID = {
  DEV: 4294967414,
  FENCE: 4294967352, // –ó–∞–±–æ—Ä—ã
  SERVICES: 4294967328, // –£—Å–ª—É–≥–∏
  SEPTIKS: 4294967327, // –°–µ—Ä–≤–∏—Å
  LANDSCAPE: 4294967339, // –ü—Ä–æ–µ–∫—Ç—ã
  DEPARTURE: 4294967337, // –ü–µ—Ä–≤–∏—á–Ω—ã–π –≤—ã–µ–∑–¥
  VACANCIES: 4294967411, // –û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
};
export const token = "7564255529:AAELnqPYEHTvtJzwSaf3tnn7JQb4whqx688";

export async function sendMessage(message) {
  try {
    const formattedText = `
*${message.text.header}*
${message.variables.city ? `${message.text.city}${message.variables.city}` : ""}
${
  message.variables.service
    ? `${message.text.service} ![üö®](tg://emoji?id=5458425656759032455)
${message.variables.service.map((task) => `\\- ${task}`).join("\n")}`
    : ""
}
${message.variables.name ? `${message.text.name}${message.variables.name}` : ""}
`;

    await axios.post(`https://api.telegram.org/bot${token}/sendMessage`, {
      chat_id: message.chat_id,
      text: formattedText,
      parse_mode: "MarkdownV2",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
  }
}

export async function sendTextMessage(message) {
  const formattedText = message.text
    .replace(/\./g, "\\.")
    .replace(/-/g, "\\-")
    .replace(/\n+/g, "\n")
    .replace(/\s*\[line\]/g, "\n")
    .replace(/=/g, "\\=")
    .replace(/>/g, "\\>")
    .replace(/\+/g, "\\+")
    .replace(/\(/g, "\\(")
    .replace(/\)/g, "\\)")
    .replace(/\]/g, "\\]")
    .replace(/\[/g, "\\[")
    .replace(/_/g, "\\_")
    .replace(/\*/g, "\\*")
    .replace(/~/g, "\\~")
    .replace(/`/g, "\\`")
    .replace(/#/g, "\\#")
    .replace(/\|/g, "\\|")
    .replace(/{/g, "\\{")
    .replace(/}/g, "\\}")
    .replace(/!/g, "\\!")
    .trim();

  try {
    await axios.post(`https://api.telegram.org/bot${token}/sendMessage`, {
      chat_id: message.chat_id,
      text: formattedText,
      parse_mode: "MarkdownV2",
      message_thread_id: message.topic_id,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
  }
}

// –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
export async function sendMessageTG(message) {
  const formattedText = message.text
    .replace(/\s*\[line\]/g, "\n")
    .replace(/\n+/g, "\n")
    .trim();

  try {
    const blob = new Blob([formattedText], { type: "text/plain" });
    const formData = new FormData();
    formData.append("document", blob, message.file_name + ".txt");
    formData.append("chat_id", message.chat_id);
    formData.append("message_thread_id", message.topic_id);

    const response = await axios.post(`https://api.telegram.org/bot${token}/sendDocument`, formData, {
      headers: { "Content-Type": "multipart/form-data" },
    });
    return response.data;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤–∞–∫–∞–Ω—Å–∏–∏
export const sendFilesToTelegram = async (message) => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ media –¥–ª—è sendMediaGroup
    const media = message.screenshots.value.map((file, index) => ({
      type: "photo",
      media: `attach://photo${index}`,
      caption: index === 0 ? `üìå –û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é\n–ò–º—è: ${message.name}\n–ö–æ–Ω—Ç–∞–∫—Ç: ${message.email}` : undefined,
    }));

    // –°–æ–∑–¥–∞–µ–º FormData –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    const formData = new FormData();
    formData.append("chat_id", CHATS_ID.BASE_DEV);
    formData.append("message_thread_id", TOPICS_ID.DEV); // –¥–ª—è —Ç–µ–º —Ñ–æ—Ä—É–º–∞

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
    screenshots.value.forEach((file, index) => {
      formData.append(`photo${index}`, file);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º media –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
    formData.append("media", JSON.stringify(media));

    const response = await axios.post(`https://api.telegram.org/bot${token}/sendMediaGroup`, formData, {
      headers: {
        "Content-Type": "multipart/form-data",
      },
    });

    return response.data;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤:", error.response?.data || error.message);
    throw error;
  }
};
